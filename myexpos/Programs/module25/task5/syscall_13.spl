//interrupt routine 13 - semget (17) and semrelease (18) syscall

alias curProcess R0;
alias curProcT R1;
alias pageTable R2;
alias userSP R10;
alias syscallNumber R3;

curProcess = [SYSTEM_STATUS_TABLE + 1];
curProcT = PROCESS_TABLE + 16 * curProcess;
pageTable = PAGE_TABLE_BASE + 20 * curProcess;
userSP = SP;

//switching to kernel stack and extracting the syscall number
[curProcT + 13] = SP;
SP = [curProcT + 11] * 512 - 1;
syscallNumber = [[pageTable + 2 * (userSP - 5) / 512] * 512 + (userSP - 5) % 512];

if(syscallNumber == 17) then
    //semget function (syscall number 17)

    //changing the mode of the current process to syscall number
    [curProcT + 9] = 17;

    //loop through the per process table of the process to find a free entry
    alias resourceTable R4;
    alias counter R5;
    resourceTable = ([curProcT + 11] + 1) * 512 - 16;
    counter = 0;
    while(counter < 8) do
        if([resourceTable + 2 * counter] == -1) then
            //if a free entry is found call AcquireSemaphore function (function number 6) in the
            //resource manager module (module 0). It returns the semaphore table entry of the
            //semaphore and -1 if the table is full

            multipush(R0, R1, R2, R3, R4, R5, R10);
            R2 = curProcess;
            R1 = 6;
            call MOD_0;
            alias returnID R6;
            returnID = R0;
            multipop(R0, R1, R2, R3, R4, R5, R10);

            //if the semaphore table is full (return value is -1), then return -2
            //else store the semaphore table index in the second field of the resource table entry
            //and make first entry (count) to 1
            if(returnID == -1) then
                [[pageTable + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512] = -2;
            else
                [resourceTable + 2 * counter] = SEMAPHORE;      //SEMAPHORE = 1
                [resourceTable + 2 * counter + 1] = returnID;

                //store the resource table counter as return value
                [[pageTable + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512] = counter;
            endif;
            break;
        endif;
        counter = counter + 1;
    endwhile;

    //if resource table of the process is full return -1
    if(counter == 8) then
        [[pageTable + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512] = -1;
    endif;

endif;

if(syscallNumber == 18) then
    //semrelease function (syscall number 18)

    //changing the mode of the current process to syscall number
    [curProcT + 9] = 18;

    //check if the resource entry passed as argument is valid
    alias resourceTable R4;
    alias resourceEntry R5;
    resourceTable = ([curProcT + 11] + 1) * 512 - 16;
    resourceEntry = [[pageTable + 2 * (userSP - 4) / 512] * 512 + (userSP - 4) % 512];
    if(resourceEntry < 0 || resourceEntry > 7) then
        [[pageTable + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512] = -1;
    else
        if([resourceTable + 2 * resourceEntry] != SEMAPHORE) then
            [[pageTable + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512] = -1;
        else
            //call releaseSemaphore function (function 7) in the resource manager module (module 0)
            //it takes the semaphore table index and the current PID as arguments
            multipush(R0, R1, R2, R3, R4, R5, R10);
            R2 = [resourceTable + 2 * resourceEntry + 1];
            R3 = curProcess;
            R1 = 7;
            call MOD_0;
            multipop(R0, R1, R2, R3, R4, R5, R10);

            //invalidate the entry in the resource table of the process
            [resourceTable + 2 * resourceEntry] = -1;

            [[pageTable + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512] = 0;
        endif;
    endif;

endif;


//changing to user stack and also change the MODE flag
[curProcT + 9] = 0;
SP = [curProcT + 13];

ireturn;
