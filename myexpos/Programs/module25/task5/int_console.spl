//console interrupt handler (int=console)

//switching to kernel stack
[PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 13] = SP;
SP = [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 11] * 512 - 1;

//saving the context of the current process
backup;

//reading the PID and the process table of the process that requested terminal read from the terminal status table
alias reqPID R0;
alias reqProcessTable R1;
reqPID = [TERMINAL_STATUS_TABLE + 1];
reqProcessTable = PROCESS_TABLE + 16 * reqPID;

//storing the value from the port P0 to the buffer of the process
[reqProcessTable + 8] = P0;

//save the registers and release the terminal by calling function 9 (ReleaseTerminal) in module 0
multipush(R0, R1);
R1 = 9;
R2 = reqPID;
call MOD_0;

//the return value is ignored, the registers are restored
multipop(R0, R1);

//restoring the context of the user proess
restore;
SP = [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 13];

//switching back to the user process

ireturn;
