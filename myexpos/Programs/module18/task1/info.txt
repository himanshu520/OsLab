In this module, we will be learning about the implementation of the disk interrupt handler. We will implement
disk interrupt handler, AcquireDisk function in the resource manager module and LoadDisk function in the
device manager module.

______________________________________________________________________________________________________________
Disk interrupts
==============================================================================================================
On encountering a load/store instruction, the XSM machine will start a disk transfer, increment IP by two
and fetch the next instruction without waiting for the data transfer to be completed. When the actual
disk-memory data transfer is completed, the disk controller will raise the disk interrupt.

 After the execution of each instruction in unprivileged mode, the machine checks whether a pending disk/
 console/timer interrupt. If so, the machine does the following actions:
    *Push the IP value into the top of the stack.
    Set IP to value stored in the interrupt vector table entry for the corresponding interrupt handler. The
    vector table entry for timer interrupt is located at physical address 493 in page 0 (ROM) of XSM and the
    value 2048 is preset in this location. Hence, the IP register gets value 2048. The machine then switches
    to privileged mode and address translation is disabled. Hence, next instruction will be fetched from
    physical address 2048.

The XSM machine enables interrupts only when the machine is executing in unprivileged mode.(If a previously
initiated load/store/IN operation is completed while XSM is running in privileged mode, the machine waits
for next transition to unprivileged mode before processing the interrupt.)

______________________________________________________________________________________________________________
Disk Status Table
==============================================================================================================
he process that wants to use the disk has to first acquire the disk. The OS maintains a data structure
called disk status table to keep track of the disk-memory transfers. The constant DISK_STATUS_TABLE gives
address to the starting of the disk status table.

The disk status table stores the following info -
    Status - Whether the disk is busy or not
    Load/Store - Whether the operation being performed is LOAD (0) or STORE (1).
    Page Number
    Block number
    PID of the process using the disk

The disk status table is present in the page 56 of the memory and can be accessed using SPL constant
DISK_STATUS_TABLE.

______________________________________________________________________________________________________________
Control Flow
==============================================================================================================
The process initiates the disk transfer by calling LoadDisk (function 2) in the device manager module (4).
The control is returned after the disk is acquired and the load command has been issued. Thereafter sets its
state to WAIT_DISK and calls the scheduler. The process is made ready again by the disk interrupt handler
when the disk transfer is complete and then gets scheduled again.

The LoadDisk function first acquires the disk by calling AcquireDisk (function 3) in the resource manager
module. Here it waits in a loop by calling the scheduler until it gets the control of the disk.
Once it gets the control of the disk, it fills the DISK_STATUS_TABLE and issues the load command. The control
is returned to the process that issued the load command.

After the disk transfer is complete, the machine raises disk interrupt. This disk interrupt is handled
similar to the console interrupt. The execution of the currently running process is stopped and the
disk interrupt handler, handles the interrupt. It releases the disk, invokes all the processes waiting
for the disk operation to complete (including the process that was using the disk) and thereafter the
control is again transferred to the user program that was executing when the interrupt occurred.

Note - There is no release disk function, the disk interrupt handler itself does its job.


______________________________________________________________________________________________________________
Per process Resource Table
==============================================================================================================
The Per-Process Resource Table has 8 entries and each entry is of 2 words. The last 16 words of the User Area
Page are reserved for this. For every instance of a file opened (or a semaphore acquired) by the process,
it stores the index of the Open File Table (or Semaphore Table) entry for the file (or semaphore) is stored
in this table. One word is used to store the resource identifier which indicates whether the resource opened
by the process is a FILE or a SEMAPHORE. Open system call sets the values of entries in this table for a file.

File descriptor, returned by Open system call, is the index of the per-process resource table entry for that
open instance of the file.

A free entry is denoted by -1 in the Resource Identifier field.

Note - Here for this module, we have not opened any file/semaphore for init process (we have implemented only
init process in this module), so we will set this table entries to 0, in the boot module for init process.
