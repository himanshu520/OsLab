//sycall interrupt handler (int=11) (implements Wait (13), Signal(14), Getpid(11), Getppid(12) syscalls)

//first save the syscall number from the user stack
//during a syscall the user program first saves its context, pushes the syscall number, then pushes the
//three syscall arguments, then pushes something for return value. Finally when the syscall is executed
//then the address of the next instruction to be executed after the return from the syscall is saved to
//the user stack. So, the syscall number would be at the address (SP - 5)

alias curPID R0;
alias userSP R1;
alias syscall R2;
alias curPT R15;
alias returnValue R14;
curPID = [SYSTEM_STATUS_TABLE + 1];
curPT = PAGE_TABLE_BASE + 20 * curPID;
userSP = SP;
returnValue = [curPT + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512;
syscall = [[curPT + 2 * ((userSP - 5) / 512)] * 512 + (userSP - 5) % 512];

//switching to kernel stack
alias curProcT R3;
curProcT = PROCESS_TABLE + 16 * curPID;
[curProcT + 13] = SP;
SP = [curProcT + 11] * 512 - 1;


if(syscall == 13) then
    //Wait syscall

    //changing process MODE to syscall number and extracting the argument
    [curProcT + 9] = 13;
    alias argPID R4;
    argPID = [[curPT + 2 * ((userSP - 4) / 512)] * 512 + (userSP - 4) % 512];

    //checking if the argument is valid - argPID is valid PID, argPID != curPID and argPID is not TERMINATED
    //if not store -1 as return value, switch to user stack and reset the MODE flag of the current process
    if(argPID < 0 || argPID >= MAX_PROC_NUM || argPID == curPID) then
        [returnValue] = -1;
        SP = [curProcT + 13];
        [curProcT + 9] = 0;
        ireturn;
    endif;

    if([PROCESS_TABLE + 16 * argPID + 4] == TERMINATED) then
        [returnValue] = -1;
        SP = [curProcT + 13];
        [curProcT + 9] = 0;
        ireturn;
    endif;

    //changing the state of the current process to (WAIT_PROCESS, argPID) - a tuple
    [curProcT + 4] = WAIT_PROCESS;
    [curProcT + 5] = argPID;

    //calling the scheduler, after saving the current context
    multipush(R0, R1, R2, R3, R4, R15, R14);
    call MOD_5;
    //the control will return here only when the state of the process has been made READY again and
    //this process is scheduled by the scheduler
    multipop(R0, R1, R2, R3, R4, R15, R14);

    //store 0 as return value, switch back to user stack after resetting the MODE flag of the calling process
    [returnValue] = 0;
    SP = [curProcT + 13];
    [curProcT + 9] = 0;

    ireturn;

endif;


if(syscall == 14) then
    //Signal syscall

    //setting the mode flag in the process table of the current process
    [curProcT + 9] = 14;

    //checking if any process is waiting for a signal from the current process and if so making it READY
    alias counter R3;
    counter = 0;
    while(counter < MAX_PROC_NUM) do
        alias procT R4;
        procT = PROCESS_TABLE + counter * 16;
        if([procT + 4] == WAIT_PROCESS && [procT + 5] == curPID) then
            [procT + 4] = READY;
        endif;
        counter = counter + 1;
    endwhile;

//store 0 as return value, switch back to user stack after resetting the MODE flag of the calling process
    [returnValue] = 0;
    SP = [curProcT + 13];
    [curProcT + 9] = 0;

    ireturn;

endif;


if(syscall == 11) then
    //Getpid syscall

    [returnValue] = [curProcT + 1];
    SP = [curProcT + 13];
    [curProcT + 9] = 0;

    ireturn;

endif;


if(syscall == 12) then
    //Getppid syscall

    [returnValue] = [curProcT + 2];
    SP = [curProcT + 13];
    [curProcT + 9] = 0;

    ireturn;

endif;

