//Process manager module (module 1)

alias functionNum R1;
alias currentPID R2;


if(functionNum == 1) then
    //GetPcbEntry function
    alias counter R3;

    counter = 0;
    while(counter < MAX_PROC_NUM) do
        if([PROCESS_TABLE + 16 * counter + 4] == TERMINATED) then
            alias newPID R0;
            newPID = counter;

            //set the PTBR, PTLR, process state (to ALLOCATED = 12) for the new process
            alias procT R10;
            procT = PROCESS_TABLE + 16 * newPID;
            [procT + 4] = 12;
            [procT + 14] = PAGE_TABLE_BASE + 20 * newPID;
            [procT + 15] = 10;
            return;
        endif;
        counter = counter + 1;
    endwhile;
    R0 = -1;
    return;
endif;


if(functionNum == 2) then
    //FreeUserAreaPage function

    //finding the page number of the user area page to be freed
    alias userAreaPage R3;
    userAreaPage = [PROCESS_TABLE + currentPID * 16 + 11];

    //freeing the semaphores held by the process (by looking in the resource table)
    alias resourceTable R4;
    alias counter R5;
    resourceTable = (userAreaPage + 1) * 512 - 16;
    counter = 0;
    while(counter < 16) do
        if([resourceTable + counter] == SEMAPHORE) then
            //call releaseSemaphore function (function number 7) in the resource manager module (module 0)
            multipush(R1, R2, R3, R4, R5);
            R3 = currentPID;
            R2 = [resourceTable + counter + 1];
            R1 = 7;
            call MOD_0;
            multipop(R1, R2, R3, R4, R5);
        endif;
        if([resourceTable + counter] == FILE) then
            //call Close function (function number 4) in the file manager module (module 3)
            multipush(R1, R2, R3, R4, R5);
            R2 = [resourceTable + counter + 1];
            R1 = 4;
            call MOD_3;
            multipop(R1, R2, R3, R4, R5);
        endif;
        counter = counter + 2;
    endwhile;

    //calling ReleasePage function (2) in the memory manager module (2)
    functionNum = 2;
    R2 = R3;
    call MOD_2;
    return;
endif;


if(functionNum == 3) then
    //ExitProcess function
    alias procT R3;
    procT = PROCESS_TABLE + currentPID * 16;

    //if the ExitProcess has not been invoked from Exec syscall handler, then invoke all processes waiting
    //for it. Whether this function is called from the Exec syscall (syscall 9) can be checked by seeing
    //the MODE flag of the current process from the process table, which must not be 9
    //also if PPID of a process in currentPID, then invalidate it to -1
    if([procT + 9] != 9) then
        alias counter R4;
        counter = 0;
        while(counter < MAX_PROC_NUM) do
            alias newProcT R5;
            newProcT = PROCESS_TABLE + 16 * counter;
            if([newProcT + 4] == WAIT_PROCESS && [newProcT + 5] == currentPID) then
                [newProcT + 4] = READY;
            endif;
            if([newProcT + 2] == currentPID) then
                [newProcT + 2] = -1;
            endif;
            counter = counter + 1;
        endwhile;

        //if memory free count is greater than MEM_HIGH call swapIn function (2) of the pager module (6)
        if([SYSTEM_STATUS_TABLE + 2] > MEM_HIGH) then
            multipush(R1, R2, R3);
            R1 = 2;
            //R2 already has current PID
            call MOD_6;
            multipop(R1, R2, R3);
        endif;
    endif;

    //calling FreePageTable function
    multipush(R1, R2, R3);
    functionNum = 4;
    call MOD_1;
    multipop(R1, R2, R3);

    //calling FreeUserAreaPage function
    multipush(R1, R2, R3);
    functionNum =  2;
    call MOD_1;
    multipop(R1, R2, R3);

    //setting the process state as terminated
    [procT + 4] = TERMINATED;

    return;
endif;


if(functionNum == 4) then
    //FreePageTable function

    //set the page table entries corresponding to the library as -1
    alias currentPT R3;
    currentPT = PAGE_TABLE_BASE + currentPID * 20;

    [currentPT + 0] = -1;
    [currentPT + 1] = "0000";
    [currentPT + 2] = -1;
    [currentPT + 3] = "0000";

    //checking if the stack and heap pages have been swapped to the disk (by looking through the disk map table)
    alias diskMapTable R4;
    alias counter R5;
    diskMapTable = DISK_MAP_TABLE + 10 * currentPID;

    counter = 0;
    while(counter < 2) do
        if([diskMapTable + 2 + counter] != -1) then
            //if heap page has been swapped with a disk block, call releaseBlock function (4) in memory module (2)
            multipush(R0, R1, R2, R3, R4, R5);
            R1 = 4;
            R3 = [diskMapTable + 2 + counter];
            call MOD_2;     //no return value
            multipop(R0, R1, R2, R3, R4, R5);
        endif;
        counter = counter + 1;
    endwhile;

    counter = 0;
    while(counter < 2) do
        if([diskMapTable + 8 + counter] != -1) then
            //if stack page has been swapped with a disk block, call releaseBlock function (4) in memory module (2)
            multipush(R0, R1, R2, R3, R4, R5);
            R1 = 4;
            R3 = [diskMapTable + 8 + counter];
            call MOD_2;     //no return value
            multipop(R0, R1, R2, R3, R4, R5);
        endif;
        counter = counter + 1;
    endwhile;


    //invalidating the disk map table entries
    counter = 0;
    while(counter < 10) do
        [diskMapTable + counter] = -1;
        counter = counter + 1;
    endwhile;


    counter = 4;
    while(counter < 20) do
        if([currentPT + counter] == -1) then
            counter = counter + 2;
            continue;
        endif;
        multipush(R1, R2, R3, R4, R5);

        //calling ReleasePage function (2) in the memory manager module (2)
        functionNum = 2;
        R2 = [currentPT + counter];
        call MOD_2;
        multipop(R1, R2, R3, R4, R5);
        [currentPT + counter] = -1;
        [currentPT + counter + 1] = "0000";

        counter = counter + 2;
    endwhile;

    return;

endif;


if(functionNum == 5) then
    //killAll function

    //AcuireInode for all the valid files present in the inode table
    alias ctr R4;
    ctr = 0;
    while(ctr < MAX_FILE_NUM) do
        if([INODE_TABLE + 16 * ctr + 1] != -1) then
            //calling AcquireInode function (4) of the resource manager module (0)
            multipush(R0, R1, R2, R4);
            R1 = 4;
            R3 = currentPID;
            R2 = ctr;
            call MOD_0;
            multipop(R0, R1, R2, R4);
        endif;
        ctr = ctr + 1;
    endwhile;

    //terminating all the processes whose current state is not terminated and the process is not the
    //current process, idle and init
    ctr = 2;
    while(ctr < MAX_PROC_NUM) do
        if([PROCESS_TABLE + 16 * ctr + 4] != TERMINATED && ctr != currentPID) then
            //calling exitProcess function (3) of the process manager module (1)
            multipush(R0, R1, R2, R4);
            R1 = 3;
            R2 = ctr;
            call MOD_1;
            multipop(R0, R1, R2, R4);
        endif;
        ctr = ctr + 1;
    endwhile;

    //releasing all the acquired inodes
    ctr = 0;
    while(ctr < MAX_FILE_NUM) do
        if([INODE_TABLE + 16 * ctr + 1] != -1) then
            //calling ReleaseInode function (5) of the resource manager module (0)
            multipush(R0, R1, R2, R3, R4);
            R1 = 5;
            R3 = currentPID;
            R2 = ctr;
            call MOD_0;
            multipop(R0, R1, R2, R3, R4);
        endif;
        ctr = ctr + 1;
    endwhile;

    return;
endif;
