//read syscall (syscall number 7) (interrupt handler 6)
//Link - http://exposnitc.github.io/os_design-files/read.html
//Arguments - filedescriptor, buffer (string/integer variable)
//output - 0 (success), -1 (filedescriptor is invalid), -2 (file pointer at eof)

alias curPID R0;
alias curProcT R1;
alias curPT R2;
alias userSP R3;
alias returnValue R4;

curPID = [SYSTEM_STATUS_TABLE + 1];
curProcT = PROCESS_TABLE + 16 * curPID;
curPT = PAGE_TABLE_BASE + 20 * curPID;
userSP = SP;
returnValue = [curPT + 2 * (userSP - 1) / 512] * 512 + (userSP - 1) % 512;

//setting the MODE to syscall number and also switching to kernel stack
[curProcT + 9] = 7;
[curProcT + 13] = userSP;
SP = [curProcT + 11] * 512 - 1;

//reading the arguments
alias fileDescriptor R5;
alias buffer R6;
fileDescriptor = [[curPT + 2 * (userSP - 4) / 512] * 512 + (userSP - 4) % 512];
buffer = [[curPT + 2 * (userSP - 3) / 512] * 512 + (userSP - 3) % 512];

if(fileDescriptor == -1) then
    //if the input is be read from the terminal call terminal read function (4) in the device manager module (4)
    multipush(R0, R1, R2, R3, R4, R5, R6);
    R1 = 4;
    R2 = curPID;
    R3 = buffer;
    call MOD_4;
    multipop(R0, R1, R2, R3, R4, R5, R6);

    //switch back to user stack, store the return value (0) and also change the process mode
    [curProcT + 9] = 0;
    SP = [curProcT + 13];
    [returnValue] = 0;
    ireturn;

else
    alias resTable R7;
    resTable = ([curProcT + 11] + 1) * 512 - 16;

    if(fileDescriptor < 0 || fileDescriptor > 7 || [resTable + 2 * fileDescriptor] != FILE) then
        //the file descriptor is invalid, return -1
        [curProcT + 9] = 0;
        SP = [curProcT + 13];
        [returnValue] = -1;
        ireturn;
    endif;

    //find the open file index and inode index corresponding to the file descriptor
    alias openFileIndex R8;
    alias inodeIndex R9;
    openFileIndex = [resTable + 2 * fileDescriptor + 1];
    inodeIndex = [OPEN_FILE_TABLE + 4 * openFileIndex];

    //acquire the inode corresponding to inodeIndex by calling AcquireInode function (4) in resource
    //manager module (0)
    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
    R1 = 4;
    R2 = inodeIndex;
    R3 = curPID;
    call MOD_0;

    if(R0 == -1) then
        //if AcquireInode fails, then return -1
        multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
        [curProcT + 9] = 0;
        SP = [curProcT + 13];
        [returnValue] = -1;
        ireturn;
    endif;

    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

    alias lseekAddr R10;
    alias phyBufferAddr R11;
    lseekAddr = OPEN_FILE_TABLE + 4 * openFileIndex + 2;
    phyBufferAddr = [curPT + 2 * (buffer / 512)] * 512 + buffer % 512;

    if(inodeIndex == INODE_ROOT) then
        //if the file to be read from is the root file
        if([lseekAddr] == 480) then
            //root file size is 480. So, eof is reached return -2 after releasing inode
            multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);
            R1 = 5;
            R2 = inodeIndex;
            R3 = curPID;
            call MOD_0;
            multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);

            [curProcT + 9] = 0;
            SP = [curProcT + 13];
            [returnValue] = -2;
            ireturn;
        endif;

        //put the value to be read from the root file to the buffer and increment the lseek pointer
        [phyBufferAddr] = [ROOT_FILE + [lseekAddr]];
        [lseekAddr] = [lseekAddr] + 1;

    else
        //check if lseek is same as the file size. If so eof is reached return -2 after releasing the inode
        if([lseekAddr] == [INODE_TABLE + 16 * inodeIndex + 2]) then
            multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);
            R1 = 5;
            R2 = inodeIndex;
            R3 = curPID;
            call MOD_0;
            multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11);

            [curProcT + 9] = 0;
            SP = [curProcT + 13];
            [returnValue] = -2;
            ireturn;
        endif;

        //find the disk block number and the disk block position from which the input is to be read
        alias diskBlock R12;
        alias diskPosition R13;
        diskBlock = [INODE_TABLE + 16 * inodeIndex + 8 + [lseekAddr] / 512];
        diskPosition = [lseekAddr] % 512;

        //read data from the file buffer by calling bufferedRead function (2) in the file manager module (3)
        multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13);
        R1 = 2;
        R2 = diskBlock;
        R3 = diskPosition;
        R4 = phyBufferAddr;
        call MOD_3;
        multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13);

        //increment lseek position
        [lseekAddr] = [lseekAddr] + 1;

    endif;

    //release the lock
    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13);
    R1 = 5;
    R2 = inodeIndex;
    R3 = curPID;
    call MOD_0;
    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13);

    //switch back to user stack, store the return value (0) and also change the process mode
    [curProcT + 9] = 0;
    SP = [curProcT + 13];
    [returnValue] = 0;
    ireturn;

endif;
