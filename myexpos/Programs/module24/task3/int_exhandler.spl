//setting the MODE_FLAG (to -1) in the process table of the current process
[PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 9] = -1;

//switching to kernel stack
[PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 13] = SP;
SP = [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 11] * 512 - 1;
backup;

//pushing EIP onto the kernel stack
multipush(EIP);

//checking if the exception cause is something other than page fault
if(EC != 0) then
    if(EC == 1) then
        print "IllegalIns";
    endif;
    if(EC == 2) then
        print "IllegalMA";
    endif;
    if(EC == 3) then
        print "ArithExcep";
    endif;
    print "ExitProc";

    //calling ExitProcess function (3) in the process manager module (1), to release the resources of the process
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;

    //invoke the scheduler
    call MOD_5;
    return;
endif;

alias curPID R2;
alias pageNum R4;
alias blockNum R3;
curPID = [SYSTEM_STATUS_TABLE + 1];
pageNum = EPN;
blockNum = [DISK_MAP_TABLE + 10 * curPID + pageNum];

if(pageNum > 3 && pageNum < 8) then
    //if the page to be loaded is code page

    //load the code page using GetCodePage function (5) in the memory manager module (2)
    multipush(R1, R2, R3, R4);
    R1 = 5;
    call MOD_2;
    multipop(R1, R2, R3, R4);
    //set the entry in page table of the current process
    [PAGE_TABLE_BASE + 20 * curPID + 2 * pageNum] = R0;
    [PAGE_TABLE_BASE + 20 * curPID + 2 * pageNum + 1] = "1100";

else
    //if the page to be loaded is heap/stack page

    //call getFreePage function (1) in the memory manager module (2)
    multipush(R1, R2, R3, R4);
    R1 = 1;
    call MOD_2;
    multipop(R1, R2, R3, R4);

    //set the page table entries
    [PAGE_TABLE_BASE + 20 * curPID + 2 * pageNum] = R0;
    [PAGE_TABLE_BASE + 20 * curPID + 2 * pageNum + 1] = "1110";

endif;


//popping EIP from the kernel stack and restoring the user context to switch back to the process
multipop(EIP);
restore;

//resetting the MODE of the current process in the process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

//storing EIP onto the top of user stack to start from the instruction that caused the exception
SP = SP + 1;
[[PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1] + 2 * (SP / 512)] * 512 + SP % 512] = EIP;

ireturn;
