//Process manager module (module 1)

alias functionNum R1;
alias currentPID R2;


if(functionNum == 1) then
    //GetPcbEntry function
    alias counter R3;

    counter = 0;
    while(counter < MAX_PROC_NUM) do
        if([PROCESS_TABLE + 16 * counter + 4] == TERMINATED) then
            alias newPID R0;
            newPID = counter;

            //set the PTBR, PTLR, process state (to ALLOCATED = 12) for the new process
            alias procT R10;
            procT = PROCESS_TABLE + 16 * newPID;
            [procT + 4] = 12;
            [procT + 14] = PAGE_TABLE_BASE + 20 * newPID;
            [procT + 15] = 10;
            return;
        endif;
        counter = counter + 1;
    endwhile;
    R0 = -1;
    return;
endif;


if(functionNum == 2) then
    //FreeUserAreaPage function

    //finding the page number of the user area page to be freed
    alias userAreaPage R3;
    userAreaPage = [PROCESS_TABLE + currentPID * 16 + 11];

    //calling ReleasePage function (2) in the memory manager module (2)
    functionNum = 2;
    R2 = R3;
    call MOD_2;
    return;
endif;


if(functionNum == 3) then
    //ExitProcess function

    //calling FreePageTable function
    functionNum = 4;
    call MOD_1;

    //calling FreeUserAreaPage function
    functionNum =  2;
    call MOD_1;

    //setting the process state as terminated
    [PROCESS_TABLE + 16 * currentPID + 4] = TERMINATED;

    return;
endif;


if(functionNum == 4) then
    //FreePageTable function

    //set the page table entries corresponding to the library as -1
    alias currentPT R3;
    currentPT = PAGE_TABLE_BASE + currentPID * 20;

    [currentPT + 0] = -1;
    [currentPT + 1] = "0000";
    [currentPT + 2] = -1;
    [currentPT + 3] = "0000";

    //checking if the stack and heap pages have been swapped to the disk (by looking through the disk map table)
    alias diskMapTable R4;
    alias counter R5;
    diskMapTable = DISK_MAP_TABLE + 10 * currentPID;

    counter = 0;
    while(counter < 2) do
        if([diskMapTable + 2 + counter] != -1) then
            //if heap page has been swapped with a disk block, call releaseBlock function (4) in memory module (2)
            multipush(R0, R1, R2, R3, R4, R5);
            R1 = 4;
            R3 = [diskMapTable + 2 + counter];
            call MOD_2;     //no return value
            multipop(R0, R1, R2, R3, R4, R5);
        endif;
        counter = counter + 1;
    endwhile;

    counter = 0;
    while(counter < 2) do
        if([diskMapTable + 8 + counter] != -1) then
            //if stack page has been swapped with a disk block, call releaseBlock function (4) in memory module (2)
            multipush(R0, R1, R2, R3, R4, R5);
            R1 = 4;
            R3 = [diskMapTable + 8 + counter];
            call MOD_2;     //no return value
            multipop(R0, R1, R2, R3, R4, R5);
        endif;
        counter = counter + 1;
    endwhile;


    //invalidating the disk map table entries
    counter = 0;
    while(counter < 10) do
        [diskMapTable + counter] = -1;
        counter = counter + 1;
    endwhile;


    counter = 4;
    while(counter < 20) do
        if([currentPT + counter] == -1) then
        	counter = counter + 2;
            continue;
        endif;
        multipush(R1, R2, R3, R4, R5);

        //calling ReleasePage function (2) in the memory manager module (2)
        functionNum = 2;
        R2 = [currentPT + counter];
        call MOD_2;
        multipop(R1, R2, R3, R4, R5);
        [currentPT + counter + 1] = "0000";

        counter = counter + 2;
    endwhile;

    return;

endif;
